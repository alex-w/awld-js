<?xml version="1.0"?>
<project name="awld.js" default="build-less">
    
    <!-- define ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    
    <!-- get properties -->
    <property name="config.dir" value="config" />
    <property file="${config.dir}/build.properties" />
    
    <property name="src.dir" value="src" />
    
    <property name="release.dir" value="release" />
    <property name="current.release.dir" value="${release.dir}/${version.number}"/>
    <property name="latest.release.dir" value="${release.dir}/latest"/>
    
    <property name="tmp.dir" value="tmp" />
    
    <property name="js.build" value="${current.release.dir}/awld.js" />
    
    
    <!-- Build targets -->
    
    <target name="build-production">
        <echo>Building production release</echo>
        <property name="js.settings" value="${config.dir}/settings.production.js"/>
        <property name="js.uglify.compress" value="true"/>
        <!-- This won't work with more than 1 core module -->
        <property name="js.rjs.core" value="${production.rjs.core}"/>
        <property name="js.rjs.core.build" value="${tmp.dir}/${production.rjs.core}.js"/>
        <property name="js.uglify.files" value="${production.files.head},
                                                ${js.rjs.core.build},
                                                ${production.files.main}"/>
        
        <ant target="-build"/>
    </target>
    
    <target name="-build" 
            depends="build-release,
                     build-less,
                     -process-rjs-core,
                     -uglify-concat-js,
                     -insert-version,
                     -copy-modules,
                     -copy-to-latest,
                     clean-build"/>
    
    <target name="build-release">
        <echo>Set up release directories</echo>
        <delete dir="${current.release.dir}"/>
        <delete dir="${latest.release.dir}"/>
        <mkdir dir="${current.release.dir}"/>
        <mkdir dir="${tmp.dir}"/>
    </target>
    
    <target name="build-less">
        <echo>Processing .less files</echo>
        <for param="file">
            <fileset dir="${src.dir}" includes="**/*.less" />
            <sequential>
                <propertyregex override="yes"
                  property="css.file"  input="@{file}"
                  regexp="(.*)\.less" replace="\1.css"/>
                <exec executable="${lessc}" failonerror="true">
                    <arg line="@{file} > ${css.file}"/>
                </exec>
          </sequential>
        </for>
    </target>
    
    <target name="-process-rjs-core">
        <rjs module="${js.rjs.core}"/>
    </target>
    
    <target name="-copy-modules">
        <copy todir="${current.release.dir}/modules">
            <fileset dir="${src.dir}/modules"/>
        </copy>
        <copy todir="${current.release.dir}/lib">
            <fileset dir="${src.dir}/lib"/>
        </copy>
        <!-- Now process require module files -->
        <exec executable="node" failonerror="true" outputproperty="js.rjs.modules">
            <arg line="${config.dir}/get_registry.js"/>
        </exec>
        <!-- copy, overwriting -->
        <for list="${js.rjs.modules}" param="file" trim="true">
            <sequential>
                <echo>Optimizing module @{file}</echo>
                <rjs module="modules/@{file}"/>
                <copy tofile="${current.release.dir}/modules/@{file}.js" overwrite="true">
                    <fileset file="${tmp.dir}/modules/@{file}.js"/>
                </copy>
            </sequential>
        </for>
    </target>
    
    <target name="-copy-to-latest">
        <copy todir="${latest.release.dir}">
            <fileset dir="${current.release.dir}"/>
        </copy>
    </target>
    
    <target name="clean-build">
        <delete dir="${tmp.dir}"/>
    </target>
    
    <target name="-uglify-concat-js">
        <echo>Minifying and concatenating JS files</echo>
        <!-- Compress and add extensions and apps -->
        <condition property="js.compress.argument" value="-nc" else="-ns -b">
            <isset property="js.uglify.compress"/>
        </condition>
        <for list="${js.uglify.files}" param="file" trim="true">
            <sequential>
                <echo>Adding @{file}</echo>
                <concat destfile="${js.build}.tmp" append="yes">
                    <fileset file="@{file}"/>
                </concat>
            </sequential>
        </for>
        <echo>Compressing ${js.build}</echo>
        <exec executable="${uglify.js}" failonerror="true">
            <arg line="--define-from-module &quot;${basedir}/${js.settings}&quot;"/>
            <arg line="${js.compress.argument}"/>
            <arg line="${js.build}.tmp > ${js.build}"/>
        </exec>
        <delete file="${js.build}.tmp"/>
    </target>
    
    <target name="-insert-version">
        <replace file="${js.build}" token="VERSION" value="'${version.number}'"/>
    </target>
    
    <!-- Server targets -->
    
    <target name="start-test-server">
        <exec executable="cmd.exe">
            <arg line="/K start node ${devserver.js} -s ${test.server.port} -r ." />
        </exec>
    </target>
    
    <target name="launch-in-browser">
        <exec executable="cmd.exe">
            <arg line="/K start http://localhost:${test.server.port}/test/pages" />
        </exec>
    </target>
    
    <target name="serve-test"
            depends="build-tests,
                     start-test-server,
                     launch-in-browser" />
    
    <!-- Test targets -->
    
    <target name="build-tests" depends="build-production">
        <!-- Copy files for "custom" setup test -->
        <copy todir="test/pages/custom">
            <fileset dir="${src.dir}" />
        </copy>
        <move file="test/pages/custom/modules" tofile="test/pages/custom/m"/>
        <move file="test/pages/custom/lib" tofile="test/pages/custom/l"/>
    </target>
    
    <target name="clean-tests">
        <delete includeemptydirs="true">
            <fileset dir="test/pages/custom">
                <include name="**/*" />
                <exclude name="**/customModule.js" />
            </fileset>
        </delete>
    </target>
    
    <target name="run-tests" depends="build-tests, start-test-server">
        <echo>Running tests</echo>
        <property name="suite" value="test/suites"/>
        <exec executable="python" failonerror="true">
            <arg file="${casper.js}" />
            <arg file="test/run.js" />
            <arg file="${suite}" />
        </exec>
        <ant target="clean-tests"/>
    </target>
    
    <!-- Macros -->
    <macrodef name="rjs">
        <attribute name="module" default=""/>
        <sequential>
            <echo>Processing @{module}</echo>
            <exec executable="${r.js}" failonerror="true">
                <arg line="-o baseUrl=./src exclude=text"/>
                <arg line="paths.jquery=empty: paths.mustache=lib/mustache.0.5.0-dev"/>
                <arg line="name=@{module} out=${tmp.dir}/@{module}.js"/>
            </exec>
        </sequential>
    </macrodef>
</project>